.libPaths()
.libPaths("C:/Program Files/R/R-3.6.1/library"   )
install.packages('RStoX')
.libPaths()
.libPaths("C:/Program Files/R/R-3.5.3/library")
install.packages('Rstox')
install.packages('devtools')
install.packages('Rstox')
install.packages('C:/Users/berge057/Downloads/Rstox_1.11.tar.gz', repos = NULL, type="source")
dep.pck <- c("data.table", "ggplot2", "pbapply", "rgdal", "rgeos", "rJava", "sp", "XML")
install.packages(dep.pck, repos="http://cran.us.r-project.org", type="binary")
install.packages('C:/Users/berge057/Downloads/Rstox_1.11.tar.gz', repos = NULL, type="source")
.libPaths()
.libPaths("C:/Program Files/R/R-3.5.3/library")
install.packages('J:/OneDrive - WageningenUR/projects/2020_KBWOT_HERAS index/Rstox_1.11.tar.gz', repos = NULL, type="source")
library(Rstox)
path_file <- 'J:/git/ijsselmeer-mse/pkgs'
.libPaths()
install.packages(file.path(path_file,'FLCore_2.6.14.9012.tar.gz'), repos = NULL, type="source")
install.packages('iterators')
install.packages(file.path(path_file,'FLCore_2.6.14.9012.tar.gz'), repos = NULL, type="source")
install.packages(file.path(path_file,'ggplotFL_2.6.7.9005.tar.gz'), repos = NULL, type="source")
install.packages('ggplot2')
path_file <- 'J:/git/ijsselmeer-mse/pkgs/'
.libPaths()
.libPaths("C:/Program Files/R/R-3.6.3/library")
install.packages(file.path(path_file,'mse_2.1.0.9100.tar.gz'), repos = NULL, type="source")
install.packages(file.path(path_file,'FLCore_2.6.14.9012.tar.gz'), repos = NULL, type="source")
install.packages(file.path(path_file,'FLasher_0.6.0.9002.tar.gz'), repos = NULL, type="source")
install.packages(file.path(path_file,'FLFishery_0.3.2.tar.gz'), repos = NULL, type="source")
install.packages(file.path(path_file,'ggplotFL_2.6.7.9005.tar.gz'), repos = NULL, type="source")
install.packages('gridExtra')
install.packages(file.path(path_file,'ggplotFL_2.6.7.9005.tar.gz'), repos = NULL, type="source")
install.packages(file.path(path_file,'FLFishery_0.3.2.tar.gz'), repos = NULL, type="source")
install.packages(file.path(path_file,'FLasher_0.6.0.9002.tar.gz'), repos = NULL, type="source")
INSTALL_opts <- c(--no-multiarch")
INSTALL_opts <- c("--no-multiarch")
install.packages(file.path(path_file,'FLasher_0.6.0.9002.tar.gz'), repos = NULL, type="source",INSTALL_opts=INSTALL_opts)
install.packages(file.path(path_file,'FLFishery_0.3.2.tar.gz'), repos = NULL, type="source")
install.packages(file.path(path_file,'FLife_3.5.0.tar.gz'), repos = NULL, type="source")
install.packages(repos="http://flr-project.org/R")
install.packages(repos="http://flr-project.org/R")
source("http://flr-project.org/R/instFLR.R")
library(FLBRP)
install.packages('FLBRP')
source("http://flr-project.org/R/instFLR.R")
install.packages("FLBRP", repos="http:///flr-project.org/R")
install.packages(repos="http://flr-project.org/R")
source("http://flr-project.org/R/instFLR.R")
path_FLBRP <- 'J:/FLBRP-2.5.3.tar.gz'
install.packages( path_FLBRP, repos = NULL, type="source")
install.packages( path_FLBRP, repos = NULL, type="source",INSTALL_opts=INSTALL_opts)
.libPaths()
.libPaths("C:/Program Files/R/R-3.6.3/library" )
source("http://flr-project.org/R/instFLR.R")
source("http://flr-project.org/R/instFLR.R")
source("http://flr-project.org/R/instFLR.R")
library(FLBRP)
source("http://flr-project.org/R/instFLR.R")
### ======================================================================================================
### Setting up
### ======================================================================================================
rm(list=ls())
graphics.off()
library(ggplot2)
library(FLSAM)
library(FLEDA)
path <- "C:/git/wg_HAWG/NSAS/"
try(setwd(path),silent=TRUE)
dir.create("assessment",showWarnings = FALSE)
setwd(file.path(path,'assessment'))
dir.create("plots_singlefleet",showWarnings = FALSE)
dir.create("plots_multifleet",showWarnings = FALSE)
setwd(path)
dataDir           <-  file.path(".","data/")
resPath           <-  file.path(".","assessment/")
output.dir.single <-  file.path(".","assessment/plots_singlefleet")
output.dir.multi  <-  file.path(".","assessment/plots_multifleet")
assessment_name_multifleet  <- "HAWG2020_multifleet"
assessment_name_singlefleet <- "HAWG2020_singlefleet"
source(file.path("../_Common/HAWG_Common_module.r")) # load general functions
#load(paste(resPath,"/NSH_HAWG2020_sf.RData",sep=""))
PDF <- F
PNG <- ifelse(PDF,F,T)
### ============================================================================
### single fleet
### ============================================================================
load(paste(resPath,"/NSH_HAWG2020_sf_retro.RData",sep=""))
load(paste(resPath,"/NSH_HAWG2020_mf_retro.RData",sep=""))
path_file <- 'J:\git\ijsselmeer-mse\pkgs'
path_file <- 'J:/git/ijsselmeer-mse/pkgs/'
INSTALL_opts <- c("--no-multiarch")
install.packages(filf.path(path_file,'FLasher_0.6.3.tar.gz'), repos = NULL, type="source",INSTALL_opts=INSTALL_opts)
INSTALL_opts <- c("--no-multiarch")
install.packages(file.path(path_file,'FLasher_0.6.3.tar.gz'), repos = NULL, type="source",INSTALL_opts=INSTALL_opts)
.libPaths()
.libPaths("C:/Program Files/R/R-3.6.2/library"   )
INSTALL_opts <- c("--no-multiarch")
install.packages(file.path(path_file,'FLasher_0.6.3.tar.gz'), repos = NULL, type="source",INSTALL_opts=INSTALL_opts)
.libPaths()
.libPaths("C:/Program Files/R/R-3.6.3/library" )
install.packages('icesTAF')
setwd("J:/git/SAM_TMB/simpleAssessment/")
load("fsa.RData") # gets "dat"
library(TMB)
compile("fsa.cpp")
dyn.load(dynlib("fsa"))
setwd("J:/git/SAM_TMB/simpleAssessment/")
load("fsa.RData") # gets "dat"
library(TMB)
compile("fsa.cpp")
dyn.load(dynlib("fsa"))
setwd("J:/git/SAM_TMB/simpleAssessment/")
load("fsa.RData") # gets "dat"
library(TMB)
compile("fsa.cpp")
dyn.load(dynlib("fsa"))
setwd("J:/git/SAM_TMB/simpleAssessment/")
load("fsa.RData") # gets "dat"
library(TMB)
compile("fsa.cpp")
dyn.load(dynlib("fsa"))
parameters <- list(
logN1Y=rep(0,nrow(dat$M)),
logN1A=rep(0,ncol(dat$M)-1),
logFY=rep(0,ncol(dat$M)),
logFA=rep(0,nrow(dat$M)),
logVarLogCatch=0,
logQ=rep(0,length(unique(dat$age[dat$fleet==2]))),
logVarLogSurvey=0
)
obj <- MakeADFun(dat,parameters,DLL="fsa", map=list(logFA=factor(c(1:4,NA,NA,NA))), silent=TRUE)
opt <- nlminb(obj$par, obj$fn, obj$gr, control=list(iter.max=1000,eval.max=1000))
rep <- sdreport(obj)
ssb <- rep$value[names(rep$value)=="ssb"]
ssb.sd <- rep$sd[names(rep$value)=="ssb"]
plot(ssb, type="l", lwd=5, col="red", ylim=c(0,550000))
lines(ssb-2*ssb.sd, type="l", lwd=1, col="red")
lines(ssb+2*ssb.sd, type="l", lwd=1, col="red")
rl <- as.list(sdreport(obj),'Est',report=TRUE)
rlSd <- as.list(sdreport(obj), "Std", report = TRUE)
dyn.load(dynlib("fsa"))
parameters <- list(
logN1Y=rep(0,nrow(dat$M)),
logN1A=rep(0,ncol(dat$M)-1),
logFY=rep(0,ncol(dat$M)),
logFA=rep(0,nrow(dat$M)),
logVarLogCatch=0,
logQ=rep(0,length(unique(dat$age[dat$fleet==2]))),
logVarLogSurvey=0
)
obj <- MakeADFun(dat,parameters,DLL="fsa", map=list(logFA=factor(c(1:4,NA,NA,NA))), silent=TRUE)
opt <- nlminb(obj$par, obj$fn, obj$gr, control=list(iter.max=1000,eval.max=1000))
rep <- sdreport(obj)
ssb <- rep$value[names(rep$value)=="ssb"]
ssb.sd <- rep$sd[names(rep$value)=="ssb"]
plot(ssb, type="l", lwd=5, col="red", ylim=c(0,550000))
lines(ssb-2*ssb.sd, type="l", lwd=1, col="red")
lines(ssb+2*ssb.sd, type="l", lwd=1, col="red")
rl <- as.list(sdreport(obj),'Est',report=TRUE)
rlSd <- as.list(sdreport(obj), "Std", report = TRUE)
dat$age
setwd("J:/git/SAM_TMB/simpleAssessment/")
load("fsa.RData") # gets "dat"
library(TMB)
compile("fsa.cpp")
dyn.load(dynlib("fsa"))
parameters <- list(
logN1Y=rep(0,nrow(dat$M)),
logN1A=rep(0,ncol(dat$M)-1),
logFY=rep(0,ncol(dat$M)),
logFA=rep(0,nrow(dat$M)),
logVarLogCatch=0,
logVarLogCatch1Y=0,
logQ=rep(0,length(unique(dat$age[dat$fleet==2]))),
logVarLogSurvey=0
)
obj <- MakeADFun(dat,parameters,DLL="fsa", map=list(logFA=factor(c(1:4,NA,NA,NA))), silent=TRUE)
opt <- nlminb(obj$par, obj$fn, obj$gr, control=list(iter.max=1000,eval.max=1000))
rep <- sdreport(obj)
ssb <- rep$value[names(rep$value)=="ssb"]
ssb.sd <- rep$sd[names(rep$value)=="ssb"]
plot(ssb, type="l", lwd=5, col="red", ylim=c(0,550000))
lines(ssb-2*ssb.sd, type="l", lwd=1, col="red")
lines(ssb+2*ssb.sd, type="l", lwd=1, col="red")
rl <- as.list(sdreport(obj),'Est',report=TRUE)
rlSd <- as.list(sdreport(obj), "Std", report = TRUE)
setwd("J:/git/SAM_TMB/simpleAssessment/")
load("fsa.RData") # gets "dat"
library(TMB)
compile("fsa.cpp")
dyn.load(dynlib("fsa"))
parameters <- list(
logN1Y=rep(0,nrow(dat$M)),
logN1A=rep(0,ncol(dat$M)-1),
logFY=rep(0,ncol(dat$M)),
logFA=rep(0,nrow(dat$M)),
logVarLogCatch=0,
logVarLogCatch1Y=0,
logQ1=rep(0,length(unique(dat$age[dat$fleet==2]))),
logQ2=rep(0,length(unique(dat$age[dat$fleet==2]))),
logVarLogSurvey=0
)
obj <- MakeADFun(dat,parameters,DLL="fsa", map=list(logFA=factor(c(1:4,NA,NA,NA))), silent=TRUE)
opt <- nlminb(obj$par, obj$fn, obj$gr, control=list(iter.max=1000,eval.max=1000))
rep <- sdreport(obj)
ssb <- rep$value[names(rep$value)=="ssb"]
ssb.sd <- rep$sd[names(rep$value)=="ssb"]
plot(ssb, type="l", lwd=5, col="red", ylim=c(0,550000))
lines(ssb-2*ssb.sd, type="l", lwd=1, col="red")
lines(ssb+2*ssb.sd, type="l", lwd=1, col="red")
rl <- as.list(sdreport(obj),'Est',report=TRUE)
rlSd <- as.list(sdreport(obj), "Std", report = TRUE)
setwd("J:/git/SAM_TMB/simpleAssessment/")
load("fsa.RData") # gets "dat"
library(TMB)
compile("fsa.cpp")
dyn.load(dynlib("fsa"))
parameters <- list(
logN1Y=rep(0,nrow(dat$M)),
logN1A=rep(0,ncol(dat$M)-1),
logFY=rep(0,ncol(dat$M)),
logFA=rep(0,nrow(dat$M)),
logVarLogCatch=0,
logVarLogCatch1Y=0,
logQ1=rep(0,length(unique(dat$age[dat$fleet==2]))),
logQ2=rep(0,length(unique(dat$age[dat$fleet==2]))),
logVarLogSurvey=0
)
obj <- MakeADFun(dat,parameters,DLL="fsa", map=list(logFA=factor(c(1:4,NA,NA,NA))), silent=TRUE)
opt <- nlminb(obj$par, obj$fn, obj$gr, control=list(iter.max=1000,eval.max=1000))
rep <- sdreport(obj)
ssb <- rep$value[names(rep$value)=="ssb"]
ssb.sd <- rep$sd[names(rep$value)=="ssb"]
plot(ssb, type="l", lwd=5, col="red", ylim=c(0,550000))
lines(ssb-2*ssb.sd, type="l", lwd=1, col="red")
lines(ssb+2*ssb.sd, type="l", lwd=1, col="red")
rl <- as.list(sdreport(obj),'Est',report=TRUE)
rlSd <- as.list(sdreport(obj), "Std", report = TRUE)
setwd("J:/git/SAM_TMB/simpleAssessment/")
load("fsa.RData") # gets "dat"
library(TMB)
compile("fsa.cpp")
dyn.load(dynlib("fsa"))
parameters <- list(
logN1Y=rep(0,nrow(dat$M)),
logN1A=rep(0,ncol(dat$M)-1),
logFY=rep(0,ncol(dat$M)),
logFA=rep(0,nrow(dat$M)),
logVarLogCatch=0,
logVarLogCatch1Y=0,
logQ1=rep(0,length(unique(dat$age[dat$fleet==2]))),
logQ2=rep(0,length(unique(dat$age[dat$fleet==2]))),
logVarLogSurvey=0
)
obj <- MakeADFun(dat,parameters,DLL="fsa", map=list(logFA=factor(c(1:4,NA,NA,NA))), silent=TRUE)
opt <- nlminb(obj$par, obj$fn, obj$gr, control=list(iter.max=1000,eval.max=1000))
rep <- sdreport(obj)
ssb <- rep$value[names(rep$value)=="ssb"]
ssb.sd <- rep$sd[names(rep$value)=="ssb"]
plot(ssb, type="l", lwd=5, col="red", ylim=c(0,550000))
lines(ssb-2*ssb.sd, type="l", lwd=1, col="red")
lines(ssb+2*ssb.sd, type="l", lwd=1, col="red")
rl <- as.list(sdreport(obj),'Est',report=TRUE)
rlSd <- as.list(sdreport(obj), "Std", report = TRUE)
