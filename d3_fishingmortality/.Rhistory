.libPaths()
.libPaths("C:/Program Files/R/R-3.6.1/library"   )
install.packages('RStoX')
.libPaths()
.libPaths("C:/Program Files/R/R-3.5.3/library")
install.packages('Rstox')
install.packages('devtools')
install.packages('Rstox')
install.packages('C:/Users/berge057/Downloads/Rstox_1.11.tar.gz', repos = NULL, type="source")
dep.pck <- c("data.table", "ggplot2", "pbapply", "rgdal", "rgeos", "rJava", "sp", "XML")
install.packages(dep.pck, repos="http://cran.us.r-project.org", type="binary")
install.packages('C:/Users/berge057/Downloads/Rstox_1.11.tar.gz', repos = NULL, type="source")
.libPaths()
.libPaths("C:/Program Files/R/R-3.5.3/library")
install.packages('J:/OneDrive - WageningenUR/projects/2020_KBWOT_HERAS index/Rstox_1.11.tar.gz', repos = NULL, type="source")
library(Rstox)
path_file <- 'J:/git/ijsselmeer-mse/pkgs'
.libPaths()
install.packages(file.path(path_file,'FLCore_2.6.14.9012.tar.gz'), repos = NULL, type="source")
install.packages('iterators')
install.packages(file.path(path_file,'FLCore_2.6.14.9012.tar.gz'), repos = NULL, type="source")
install.packages(file.path(path_file,'ggplotFL_2.6.7.9005.tar.gz'), repos = NULL, type="source")
install.packages('ggplot2')
path_file <- 'J:/git/ijsselmeer-mse/pkgs/'
.libPaths()
.libPaths("C:/Program Files/R/R-3.6.3/library")
install.packages(file.path(path_file,'mse_2.1.0.9100.tar.gz'), repos = NULL, type="source")
install.packages(file.path(path_file,'FLCore_2.6.14.9012.tar.gz'), repos = NULL, type="source")
install.packages(file.path(path_file,'FLasher_0.6.0.9002.tar.gz'), repos = NULL, type="source")
install.packages(file.path(path_file,'FLFishery_0.3.2.tar.gz'), repos = NULL, type="source")
install.packages(file.path(path_file,'ggplotFL_2.6.7.9005.tar.gz'), repos = NULL, type="source")
install.packages('gridExtra')
install.packages(file.path(path_file,'ggplotFL_2.6.7.9005.tar.gz'), repos = NULL, type="source")
install.packages(file.path(path_file,'FLFishery_0.3.2.tar.gz'), repos = NULL, type="source")
install.packages(file.path(path_file,'FLasher_0.6.0.9002.tar.gz'), repos = NULL, type="source")
INSTALL_opts <- c(--no-multiarch")
INSTALL_opts <- c("--no-multiarch")
install.packages(file.path(path_file,'FLasher_0.6.0.9002.tar.gz'), repos = NULL, type="source",INSTALL_opts=INSTALL_opts)
install.packages(file.path(path_file,'FLFishery_0.3.2.tar.gz'), repos = NULL, type="source")
install.packages(file.path(path_file,'FLife_3.5.0.tar.gz'), repos = NULL, type="source")
install.packages(repos="http://flr-project.org/R")
install.packages(repos="http://flr-project.org/R")
source("http://flr-project.org/R/instFLR.R")
library(FLBRP)
install.packages('FLBRP')
source("http://flr-project.org/R/instFLR.R")
install.packages("FLBRP", repos="http:///flr-project.org/R")
install.packages(repos="http://flr-project.org/R")
source("http://flr-project.org/R/instFLR.R")
path_FLBRP <- 'J:/FLBRP-2.5.3.tar.gz'
install.packages( path_FLBRP, repos = NULL, type="source")
install.packages( path_FLBRP, repos = NULL, type="source",INSTALL_opts=INSTALL_opts)
.libPaths()
.libPaths("C:/Program Files/R/R-3.6.3/library" )
source("http://flr-project.org/R/instFLR.R")
source("http://flr-project.org/R/instFLR.R")
source("http://flr-project.org/R/instFLR.R")
library(FLBRP)
source("http://flr-project.org/R/instFLR.R")
### ======================================================================================================
### Setting up
### ======================================================================================================
rm(list=ls())
graphics.off()
library(ggplot2)
library(FLSAM)
library(FLEDA)
path <- "C:/git/wg_HAWG/NSAS/"
try(setwd(path),silent=TRUE)
dir.create("assessment",showWarnings = FALSE)
setwd(file.path(path,'assessment'))
dir.create("plots_singlefleet",showWarnings = FALSE)
dir.create("plots_multifleet",showWarnings = FALSE)
setwd(path)
dataDir           <-  file.path(".","data/")
resPath           <-  file.path(".","assessment/")
output.dir.single <-  file.path(".","assessment/plots_singlefleet")
output.dir.multi  <-  file.path(".","assessment/plots_multifleet")
assessment_name_multifleet  <- "HAWG2020_multifleet"
assessment_name_singlefleet <- "HAWG2020_singlefleet"
source(file.path("../_Common/HAWG_Common_module.r")) # load general functions
#load(paste(resPath,"/NSH_HAWG2020_sf.RData",sep=""))
PDF <- F
PNG <- ifelse(PDF,F,T)
### ============================================================================
### single fleet
### ============================================================================
load(paste(resPath,"/NSH_HAWG2020_sf_retro.RData",sep=""))
load(paste(resPath,"/NSH_HAWG2020_mf_retro.RData",sep=""))
path_file <- 'J:\git\ijsselmeer-mse\pkgs'
path_file <- 'J:/git/ijsselmeer-mse/pkgs/'
INSTALL_opts <- c("--no-multiarch")
install.packages(filf.path(path_file,'FLasher_0.6.3.tar.gz'), repos = NULL, type="source",INSTALL_opts=INSTALL_opts)
INSTALL_opts <- c("--no-multiarch")
install.packages(file.path(path_file,'FLasher_0.6.3.tar.gz'), repos = NULL, type="source",INSTALL_opts=INSTALL_opts)
.libPaths()
.libPaths("C:/Program Files/R/R-3.6.2/library"   )
INSTALL_opts <- c("--no-multiarch")
install.packages(file.path(path_file,'FLasher_0.6.3.tar.gz'), repos = NULL, type="source",INSTALL_opts=INSTALL_opts)
setwd("J:/git/SAM_TMB/d3_processn")
load("Nobs.RData")
matplot(log(Nobs$Nobs), main="logN")
library(TMB)
compile("Nobs0.cpp")
dyn.load(dynlib("Nobs0"))
par <- list()
par$logsdR <- 0
par$logsdS <- 0
par$logsd <- 0
par$logN <- matrix(0, nrow=nrow(Nobs$Nobs), ncol=ncol(Nobs$Nobs))
obj <- MakeADFun(Nobs, par, random="logN", DLL="Nobs0")
fit <- nlminb(obj$par, obj$fn, obj$gr)
sdr<-sdreport(obj)
matplot(as.list(sdr,"Est")$logN, type="l", add=TRUE)
setwd("J:/git/SAM_TMB/d3_processn")
load("Fobs.RData")
setwd("J:/git/SAM_TMB/d3_fishingmortality")
load("Fobs.RData")
setwd("J:/git/SAM_TMB/d3_fishingmortality")
load("Fobs.RData")
matplot(Fobs$year, log(Fobs$Fobs), xlab="Year", ylab="logF", pch=colnames(Fobs$Fobs))
library(TMB)
compile("Fobs.cpp")
dyn.load(dynlib("Fobs"))
Fobs$cormode <- 0
par <- list()
par$logsdF <- rep(0,ncol(Fobs$Fobs))
par$transPsi <- if(Fobs$cormode==0){numeric(0)}else{0.1}
par$logsd <- 0
par$logF <- matrix(0, nrow=nrow(Fobs$Fobs), ncol=ncol(Fobs$Fobs))
map=list(logsdF=factor(rep(1,ncol(Fobs$Fobs))))
obj <- MakeADFun(Fobs, par, random="logF", DLL="Fobs", map=map)
fit <- nlminb(obj$par, obj$fn, obj$gr)
sdr<-sdreport(obj)
matplot(Fobs$year, as.list(sdr,"Est")$logF, type="l", add=TRUE)
matplot(Fobs$year, log(Fobs$Fobs), xlab="Year", ylab="logF", pch=colnames(Fobs$Fobs))
matplot(Fobs$year, as.list(sdr,"Est")$logF, type="l", add=TRUE)
setwd("J:/git/SAM_TMB/d3_fishingmortality")
load("Fobs.RData")
matplot(Fobs$year, log(Fobs$Fobs), xlab="Year", ylab="logF", pch=colnames(Fobs$Fobs))
library(TMB)
compile("Fobs.cpp")
setwd("J:/git/SAM_TMB/d3_fishingmortality")
load("Fobs.RData")
matplot(Fobs$year, log(Fobs$Fobs), xlab="Year", ylab="logF", pch=colnames(Fobs$Fobs))
library(TMB)
compile("Fobs.cpp")
setwd("J:/git/SAM_TMB/d3_fishingmortality")
load("Fobs.RData")
matplot(Fobs$year, log(Fobs$Fobs), xlab="Year", ylab="logF", pch=colnames(Fobs$Fobs))
library(TMB)
compile("Fobs.cpp")
setwd("J:/git/SAM_TMB/d3_fishingmortality")
load("Fobs.RData")
matplot(Fobs$year, log(Fobs$Fobs), xlab="Year", ylab="logF", pch=colnames(Fobs$Fobs))
library(TMB)
compile("Fobs.cpp")
dyn.load(dynlib("Fobs"))
Fobs$cormode <- 1
par <- list()
par$logsdF <- rep(0,ncol(Fobs$Fobs))
par$transPsi <- if(Fobs$cormode==0){numeric(0)}else{0.1}
par$logsd <- 0
par$logF <- matrix(0, nrow=nrow(Fobs$Fobs), ncol=ncol(Fobs$Fobs))
map=list(logsdF=factor(rep(1,ncol(Fobs$Fobs))))
obj <- MakeADFun(Fobs, par, random="logF", DLL="Fobs", map=map)
fit <- nlminb(obj$par, obj$fn, obj$gr)
sdr<-sdreport(obj)
matplot(Fobs$year, as.list(sdr,"Est")$logF, type="l", add=TRUE)
sdr
fit
setwd("J:/git/SAM_TMB/d3_fishingmortality")
load("Fobs.RData")
matplot(Fobs$year, log(Fobs$Fobs), xlab="Year", ylab="logF", pch=colnames(Fobs$Fobs))
library(TMB)
compile("Fobs.cpp")
setwd("J:/git/SAM_TMB/d3_fishingmortality")
load("Fobs.RData")
matplot(Fobs$year, log(Fobs$Fobs), xlab="Year", ylab="logF", pch=colnames(Fobs$Fobs))
library(TMB)
compile("Fobs.cpp")
setwd("J:/git/SAM_TMB/d3_fishingmortality")
load("Fobs.RData")
matplot(Fobs$year, log(Fobs$Fobs), xlab="Year", ylab="logF", pch=colnames(Fobs$Fobs))
library(TMB)
compile("Fobs.cpp")
dyn.load(dynlib("Fobs"))
Fobs$cormode <- 1
par <- list()
par$logsdF <- rep(0,ncol(Fobs$Fobs))
par$transPsi <- if(Fobs$cormode==0){numeric(0)}else{0.1}
par$logsd <- 0
par$logF <- matrix(0, nrow=nrow(Fobs$Fobs), ncol=ncol(Fobs$Fobs))
map=list(logsdF=factor(rep(1,ncol(Fobs$Fobs))))
obj <- MakeADFun(Fobs, par, random="logF", DLL="Fobs", map=map)
fit <- nlminb(obj$par, obj$fn, obj$gr)
sdr<-sdreport(obj)
matplot(Fobs$year, as.list(sdr,"Est")$logF, type="l", add=TRUE)
setwd("J:/git/SAM_TMB/d3_fishingmortality")
load("Fobs.RData")
matplot(Fobs$year, log(Fobs$Fobs), xlab="Year", ylab="logF", pch=colnames(Fobs$Fobs))
library(TMB)
compile("Fobs.cpp")
dyn.load(dynlib("Fobs"))
Fobs$cormode <- 1
par <- list()
par$logsdF <- rep(0,ncol(Fobs$Fobs))
par$transPsi <- if(Fobs$cormode==0){numeric(0)}else{0.1}
par$logsd <- 0
par$logF <- matrix(0, nrow=nrow(Fobs$Fobs), ncol=ncol(Fobs$Fobs))
map=list(logsdF=factor(rep(1,ncol(Fobs$Fobs))))
obj <- MakeADFun(Fobs, par, random="logF", DLL="Fobs", map=map)
fit <- nlminb(obj$par, obj$fn, obj$gr)
sdr<-sdreport(obj)
matplot(Fobs$year, as.list(sdr,"Est")$logF, type="l", add=TRUE)
setwd("J:/git/SAM_TMB/d3_fishingmortality")
load("Fobs.RData")
matplot(Fobs$year, log(Fobs$Fobs), xlab="Year", ylab="logF", pch=colnames(Fobs$Fobs))
library(TMB)
compile("Fobs.cpp")
dyn.load(dynlib("Fobs"))
Fobs$cormode <- 2
par <- list()
par$logsdF <- rep(0,ncol(Fobs$Fobs))
par$transPsi <- if(Fobs$cormode==0){numeric(0)}else{0.1}
par$logsd <- 0
par$logF <- matrix(0, nrow=nrow(Fobs$Fobs), ncol=ncol(Fobs$Fobs))
map=list(logsdF=factor(rep(1,ncol(Fobs$Fobs))))
obj <- MakeADFun(Fobs, par, random="logF", DLL="Fobs", map=map)
fit <- nlminb(obj$par, obj$fn, obj$gr)
sdr<-sdreport(obj)
matplot(Fobs$year, as.list(sdr,"Est")$logF, type="l", add=TRUE)
setwd("J:/git/SAM_TMB/d3_fishingmortality")
load("Fobs.RData")
matplot(Fobs$year, log(Fobs$Fobs), xlab="Year", ylab="logF", pch=colnames(Fobs$Fobs))
library(TMB)
compile("Fobs.cpp")
dyn.load(dynlib("Fobs"))
# case A
Fobs$cormode <- 0
par <- list()
par$logsdF <- rep(0,ncol(Fobs$Fobs))
par$transPsi <- if(Fobs$cormode==0){numeric(0)}else{0.1}
par$logsd <- 0
par$logF <- matrix(0, nrow=nrow(Fobs$Fobs), ncol=ncol(Fobs$Fobs))
map=list(logsdF=factor(rep(1,ncol(Fobs$Fobs))))
obj <- MakeADFun(Fobs, par, random="logF", DLL="Fobs", map=map)
fit <- nlminb(obj$par, obj$fn, obj$gr)
sdr<-sdreport(obj)
matplot(Fobs$year, as.list(sdr,"Est")$logF, type="l", add=TRUE)
# case B
Fobs$cormode <- 1
par <- list()
par$logsdF <- rep(0,ncol(Fobs$Fobs))
par$transPsi <- if(Fobs$cormode==0){numeric(0)}else{0.1}
par$logsd <- 0
par$logF <- matrix(0, nrow=nrow(Fobs$Fobs), ncol=ncol(Fobs$Fobs))
map=list(logsdF=factor(rep(1,ncol(Fobs$Fobs))))
obj <- MakeADFun(Fobs, par, random="logF", DLL="Fobs", map=map)
fit <- nlminb(obj$par, obj$fn, obj$gr)
sdr<-sdreport(obj)
matplot(Fobs$year, as.list(sdr,"Est")$logF, type="l", add=TRUE)
# case C
Fobs$cormode <- 2
par <- list()
par$logsdF <- rep(0,ncol(Fobs$Fobs))
par$transPsi <- if(Fobs$cormode==0){numeric(0)}else{0.1}
par$logsd <- 0
par$logF <- matrix(0, nrow=nrow(Fobs$Fobs), ncol=ncol(Fobs$Fobs))
map=list(logsdF=factor(rep(1,ncol(Fobs$Fobs))))
obj <- MakeADFun(Fobs, par, random="logF", DLL="Fobs", map=map)
fit <- nlminb(obj$par, obj$fn, obj$gr)
sdr<-sdreport(obj)
matplot(Fobs$year, as.list(sdr,"Est")$logF, type="l", add=TRUE)
setwd("J:/git/SAM_TMB/d3_fishingmortality")
load("Fobs.RData")
matplot(Fobs$year, log(Fobs$Fobs), xlab="Year", ylab="logF", pch=colnames(Fobs$Fobs))
library(TMB)
compile("Fobs.cpp")
dyn.load(dynlib("Fobs"))
# case A
Fobs$cormode <- 0
par <- list()
par$logsdF <- rep(0,ncol(Fobs$Fobs))
par$transPsi <- if(Fobs$cormode==0){numeric(0)}else{0.1}
par$logsd <- 0
par$logF <- matrix(0, nrow=nrow(Fobs$Fobs), ncol=ncol(Fobs$Fobs))
map=list(logsdF=factor(rep(1,ncol(Fobs$Fobs))))
obj <- MakeADFun(Fobs, par, random="logF", DLL="Fobs", map=map)
fit <- nlminb(obj$par, obj$fn, obj$gr)
sdr<-sdreport(obj)
matplot(Fobs$year, as.list(sdr,"Est")$logF, type="l", add=TRUE)
# case B
Fobs$cormode <- 1
par <- list()
par$logsdF <- rep(0,ncol(Fobs$Fobs))
par$transPsi <- if(Fobs$cormode==0){numeric(0)}else{0.1}
par$logsd <- 0
par$logF <- matrix(0, nrow=nrow(Fobs$Fobs), ncol=ncol(Fobs$Fobs))
map=list(logsdF=factor(rep(1,ncol(Fobs$Fobs))))
obj <- MakeADFun(Fobs, par, random="logF", DLL="Fobs", map=map)
fit <- nlminb(obj$par, obj$fn, obj$gr)
sdr<-sdreport(obj)
matplot(Fobs$year, as.list(sdr,"Est")$logF, type="l", add=TRUE)
# case C
Fobs$cormode <- 2
par <- list()
par$logsdF <- rep(0,ncol(Fobs$Fobs))
par$transPsi <- if(Fobs$cormode==0){numeric(0)}else{0.1}
par$logsd <- 0
par$logF <- matrix(0, nrow=nrow(Fobs$Fobs), ncol=ncol(Fobs$Fobs))
map=list(logsdF=factor(rep(1,ncol(Fobs$Fobs))))
obj <- MakeADFun(Fobs, par, random="logF", DLL="Fobs", map=map)
fit <- nlminb(obj$par, obj$fn, obj$gr)
sdr<-sdreport(obj)
matplot(Fobs$year, as.list(sdr,"Est")$logF, type="l", add=TRUE)
# case d
Fobs$cormode <- 3
par <- list()
par$logsdF <- rep(0,ncol(Fobs$Fobs))
par$transPsi <- if(Fobs$cormode==0){numeric(0)}else{0.1}
par$logsd <- 0
par$logF <- matrix(0, nrow=nrow(Fobs$Fobs), ncol=ncol(Fobs$Fobs))
map=list(logsdF=factor(rep(1,ncol(Fobs$Fobs))))
obj <- MakeADFun(Fobs, par, random="logF", DLL="Fobs", map=map)
fit <- nlminb(obj$par, obj$fn, obj$gr)
sdr<-sdreport(obj)
matplot(Fobs$year, as.list(sdr,"Est")$logF, type="l", add=TRUE)
setwd("J:/git/SAM_TMB/d3_fishingmortality")
load("Fobs.RData")
matplot(Fobs$year, log(Fobs$Fobs), xlab="Year", ylab="logF", pch=colnames(Fobs$Fobs))
library(TMB)
compile("Fobs.cpp")
dyn.load(dynlib("Fobs"))
Fobs$cormode <- 3
par <- list()
par$logsdF <- rep(0,ncol(Fobs$Fobs))
par$transPsi <- if(Fobs$cormode==0){numeric(0)}else{0.1}
par$logsd <- 0
par$logF <- matrix(0, nrow=nrow(Fobs$Fobs), ncol=ncol(Fobs$Fobs))
map=list(logsdF=factor(rep(1,ncol(Fobs$Fobs))))
obj <- MakeADFun(Fobs, par, random="logF", DLL="Fobs", map=map)
fit <- nlminb(obj$par, obj$fn, obj$gr)
sdr<-sdreport(obj)
matplot(Fobs$year, as.list(sdr,"Est")$logF, type="l", add=TRUE)
fit
Fobs$cormode <- 3
par <- list()
par$logsdF <- rep(0,ncol(Fobs$Fobs))
par$transPsi <- if(Fobs$cormode==0){numeric(0)}else{10}
par$logsd <- 0
par$logF <- matrix(0, nrow=nrow(Fobs$Fobs), ncol=ncol(Fobs$Fobs))
map=list(logsdF=factor(rep(1,ncol(Fobs$Fobs))))
obj <- MakeADFun(Fobs, par, random="logF", DLL="Fobs", map=map)
fit <- nlminb(obj$par, obj$fn, obj$gr)
sdr<-sdreport(obj)
matplot(Fobs$year, as.list(sdr,"Est")$logF, type="l", add=TRUE)
Fobs$cormode <- 3
par <- list()
par$logsdF <- rep(0,ncol(Fobs$Fobs))
par$transPsi <- if(Fobs$cormode==0){numeric(0)}else{0}
par$logsd <- 0
par$logF <- matrix(0, nrow=nrow(Fobs$Fobs), ncol=ncol(Fobs$Fobs))
map=list(logsdF=factor(rep(1,ncol(Fobs$Fobs))))
obj <- MakeADFun(Fobs, par, random="logF", DLL="Fobs", map=map)
fit <- nlminb(obj$par, obj$fn, obj$gr)
sdr<-sdreport(obj)
matplot(Fobs$year, as.list(sdr,"Est")$logF, type="l", add=TRUE)
library(TMBhelper)
