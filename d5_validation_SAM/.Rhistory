EK60_EK80_all$SA <- 10*log10(EK60_EK80_all$NASC/4/pi/1852^2)
EK60_EK80_freq <- EK60_EK80_all[ EK60_EK80_all$frequency == 38000 &
EK60_EK80_all$survey == 'HERAS'&EK60_EK80_all$year == 2018,]
EK60 <- EK60_EK80_freq[EK60_EK80_freq$system == 'EK60',]
EK80 <- EK60_EK80_freq[EK60_EK80_freq$system == 'EK80',]
EK60_EK80_merge <- merge(EK60, EK80, by.x=c('Interval','Layer','survey','year'), by.y=c('Interval','Layer','survey','year'))
EK60_EK80_merge <- EK60_EK80_merge[!which(EK60_EK80_merge$SA.x == max(EK60_EK80_merge$SA.x)),]
lrfit <- gam(data = EK60_EK80_merge,formula= SA.y ~ s(SA.x))
#lrfit <- glm(data = EK60_EK80_merge,formula= SA.y ~ poly(SA.x,3))
#lrfit <- glm(data = EK60_EK80_merge,formula= SA.y ~ SA.x , family = gaussian)
summary(lrfit)
EK60_EK80_merge$resi <- residuals.gam(lrfit)
# remove ouliers
quantDel <- quantile(EK60_EK80_merge$resi, probs = c(0.01, 0.99))
EK60_EK80_merge <- EK60_EK80_merge[!(EK60_EK80_merge$resi < quantDel[1] | EK60_EK80_merge$resi[2] > quantDel[2])]
min(EK60_EK80_merge$resi)
mybin <- cut(EK60_EK80_merge$SA.x,5,include.lowest=TRUE,right = FALSE)
EK60_EK80_merge$Bins <- mybin
out <- EK60_EK80_merge %>% group_by(Bins) %>% summarise(mean_SA = mean(SA.x),sd_SA = sd(SA.x),mean_resi = mean(resi),sd_resi=sd(resi)) %>% as.data.frame()
N <- 1000
SA.x_draw <- array(dim = c(dim(out)[1]*N,1))
resi_draw <- array(dim = c(dim(out)[1]*N,1))
for(idx in 1:dim(out)[1]){
SA.x_draw[(N*(idx-1)+1):(N*idx)] <- rnorm(N,mean=out$mean_SA[idx],sd = out$sd_SA[idx])
resi_draw[(N*(idx-1)+1):(N*idx)] <- rnorm(N,mean=out$mean_resi[idx],sd = out$sd_resi[idx])
}
SA.y_draw <- predict.gam(lrfit, list(SA.x = SA.x_draw),se.fit = TRUE)$fit+as.numeric(resi_draw)
xSeq <- seq(from=min(EK60_EK80_merge$SA.x), to=max(EK60_EK80_merge$SA.x), by=0.1)
ySeq <- predict.gam(lrfit, list(SA.x = xSeq),se.fit = TRUE)
plot(SA.x_draw,SA.y_draw,xlim = c(-140,-20),ylim=c(-140,-20))
points(EK60_EK80_merge$SA.x,EK60_EK80_merge$SA.y,col='red')
lines(xSeq,ySeq$fit,col='blue')
lines(c(-140,-20),c(-140,-20))
rm(list=ls())
library(data.table)
library(tidyr)
library(dplyr)
library(ggplot2)
library(mgcv)
library(MASS)
path <- 'J:/git/heras_index_kbwot/EK60_EK80/'
try(setwd(path),silent=TRUE)
EK60_EK80_all <- fread(file.path('.','EK60_EK80.csv'))
EK60_EK80_all$SA <- 10*log10(EK60_EK80_all$NASC/4/pi/1852^2)
EK60_EK80_freq <- EK60_EK80_all[ EK60_EK80_all$frequency == 38000 &
EK60_EK80_all$survey == 'HERAS'&EK60_EK80_all$year == 2018,]
EK60 <- EK60_EK80_freq[EK60_EK80_freq$system == 'EK60',]
EK80 <- EK60_EK80_freq[EK60_EK80_freq$system == 'EK80',]
EK60_EK80_merge <- merge(EK60, EK80, by.x=c('Interval','Layer','survey','year'), by.y=c('Interval','Layer','survey','year'))
EK60_EK80_merge <- EK60_EK80_merge[!which(EK60_EK80_merge$SA.x == max(EK60_EK80_merge$SA.x)),]
lrfit <- gam(data = EK60_EK80_merge,formula= SA.y ~ s(SA.x))
#lrfit <- glm(data = EK60_EK80_merge,formula= SA.y ~ poly(SA.x,3))
#lrfit <- glm(data = EK60_EK80_merge,formula= SA.y ~ SA.x , family = gaussian)
summary(lrfit)
EK60_EK80_merge$resi <- residuals.gam(lrfit)
# remove ouliers
quantDel <- quantile(EK60_EK80_merge$resi, probs = c(0.01, 0.99))
EK60_EK80_merge <- EK60_EK80_merge[!(EK60_EK80_merge$resi < quantDel[1] | EK60_EK80_merge$resi[2] > quantDel[2])]
min(EK60_EK80_merge$resi)
mybin <- cut(EK60_EK80_merge$SA.x,5,include.lowest=TRUE,right = FALSE)
EK60_EK80_merge$Bins <- mybin
out <- EK60_EK80_merge %>% group_by(Bins) %>% summarise(mean_SA = mean(SA.x),sd_SA = sd(SA.x),mean_resi = mean(resi),sd_resi=sd(resi)) %>% as.data.frame()
N <- 500
SA.x_draw <- array(dim = c(dim(out)[1]*N,1))
resi_draw <- array(dim = c(dim(out)[1]*N,1))
for(idx in 1:dim(out)[1]){
SA.x_draw[(N*(idx-1)+1):(N*idx)] <- rnorm(N,mean=out$mean_SA[idx],sd = out$sd_SA[idx])
resi_draw[(N*(idx-1)+1):(N*idx)] <- rnorm(N,mean=out$mean_resi[idx],sd = out$sd_resi[idx])
}
SA.y_draw <- predict.gam(lrfit, list(SA.x = SA.x_draw),se.fit = TRUE)$fit+as.numeric(resi_draw)
xSeq <- seq(from=min(EK60_EK80_merge$SA.x), to=max(EK60_EK80_merge$SA.x), by=0.1)
ySeq <- predict.gam(lrfit, list(SA.x = xSeq),se.fit = TRUE)
plot(SA.x_draw,SA.y_draw,xlim = c(-140,-20),ylim=c(-140,-20))
points(EK60_EK80_merge$SA.x,EK60_EK80_merge$SA.y,col='red')
lines(xSeq,ySeq$fit,col='blue')
lines(c(-140,-20),c(-140,-20))
myDraw <- cbind(SA.x_draw,SA.y_draw)
View(myDraw)
myDraw <- cbind(SA.x_draw=SA.x_draw,SA.y_draw=SA.y_draw)
View(myDraw)
myDraw <- as.data.frame(SA.x_draw=SA.x_draw,SA.y_draw=SA.y_draw)
myDraw <- as.data.frame(x=SA.x_draw,y=SA.y_draw)
View(myDraw)
SA.x_draw[1]
myDraw <- cbind(SA.x_draw,SA.y_draw)
SA.y_draw[1]
View(myDraw)
rm(list=ls())
library(data.table)
library(tidyr)
library(dplyr)
library(ggplot2)
library(mgcv)
library(MASS)
path <- 'J:/git/heras_index_kbwot/EK60_EK80/'
try(setwd(path),silent=TRUE)
EK60_EK80_all <- fread(file.path('.','EK60_EK80.csv'))
EK60_EK80_all$SA <- 10*log10(EK60_EK80_all$NASC/4/pi/1852^2)
EK60_EK80_freq <- EK60_EK80_all[ EK60_EK80_all$frequency == 38000 &
EK60_EK80_all$survey == 'HERAS'&EK60_EK80_all$year == 2018,]
EK60 <- EK60_EK80_freq[EK60_EK80_freq$system == 'EK60',]
EK80 <- EK60_EK80_freq[EK60_EK80_freq$system == 'EK80',]
EK60_EK80_merge <- merge(EK60, EK80, by.x=c('Interval','Layer','survey','year'), by.y=c('Interval','Layer','survey','year'))
EK60_EK80_merge <- EK60_EK80_merge[!which(EK60_EK80_merge$SA.x == max(EK60_EK80_merge$SA.x)),]
lrfit <- gam(data = EK60_EK80_merge,formula= SA.y ~ s(SA.x))
#lrfit <- glm(data = EK60_EK80_merge,formula= SA.y ~ poly(SA.x,3))
#lrfit <- glm(data = EK60_EK80_merge,formula= SA.y ~ SA.x , family = gaussian)
summary(lrfit)
EK60_EK80_merge$resi <- residuals.gam(lrfit)
# remove ouliers
quantDel <- quantile(EK60_EK80_merge$resi, probs = c(0.01, 0.99))
EK60_EK80_merge <- EK60_EK80_merge[!(EK60_EK80_merge$resi < quantDel[1] | EK60_EK80_merge$resi[2] > quantDel[2])]
min(EK60_EK80_merge$resi)
mybin <- cut(EK60_EK80_merge$SA.x,5,include.lowest=TRUE,right = FALSE)
EK60_EK80_merge$Bins <- mybin
out <- EK60_EK80_merge %>% group_by(Bins) %>% summarise(mean_SA = mean(SA.x),sd_SA = sd(SA.x),mean_resi = mean(resi),sd_resi=sd(resi)) %>% as.data.frame()
N <- 500
SA.x_draw <- array(dim = c(dim(out)[1]*N,1))
resi_draw <- array(dim = c(dim(out)[1]*N,1))
for(idx in 1:dim(out)[1]){
SA.x_draw[(N*(idx-1)+1):(N*idx)] <- rnorm(N,mean=out$mean_SA[idx],sd = out$sd_SA[idx])
resi_draw[(N*(idx-1)+1):(N*idx)] <- rnorm(N,mean=out$mean_resi[idx],sd = out$sd_resi[idx])
}
SA.y_draw <- predict.gam(lrfit, list(SA.x = SA.x_draw),se.fit = TRUE)$fit+as.numeric(resi_draw)
xSeq <- seq(from=min(EK60_EK80_merge$SA.x), to=max(EK60_EK80_merge$SA.x), by=0.1)
ySeq <- predict.gam(lrfit, list(SA.x = xSeq),se.fit = TRUE)
myDraw <- cbind(SA.x_draw,SA.y_draw)
colnames(myDraw) <- c('x','y')
ggplot(myDraw, aes(x=x, y=y) ) +
geom_bin2d() +
theme_bw()
myDraw <- as.data.frame(cbind(SA.x_draw,SA.y_draw))
colnames(myDraw) <- c('x','y')
ggplot(myDraw, aes(x=x, y=y) ) +
geom_bin2d() +
theme_bw()
ggplot(myDraw, aes(x=x, y=y) ) +
geom_bin2d() +
theme_bw()+
ylim(-140,-20)
ggplot(myDraw, aes(x=x, y=y) ) +
geom_bin2d() +
theme_bw()+
ylim(-140,-20)+
xlim(-140,-20)+
geom_abline(slope=1,intercept = 0)
ggplot(myDraw, aes(x=x, y=y) ) +
geom_bin2d() +
theme_bw()+
ylim(-140,-20)+
xlim(-140,-20)+
geom_abline(slope=1,intercept = 0)
ggplot(EK60_EK80_merge, aes(x=SA.x, y=SA.y) ) +
geom_bin2d() +
theme_bw()+
ylim(-140,-20)+
xlim(-140,-20)+
geom_abline(slope=1,intercept = 0)
rm(list=ls())
library(data.table)
library(tidyr)
library(dplyr)
library(ggplot2)
library(mgcv)
library(MASS)
path <- 'J:/git/heras_index_kbwot/EK60_EK80/'
try(setwd(path),silent=TRUE)
EK60_EK80_all <- fread(file.path('.','EK60_EK80.csv'))
EK60_EK80_all$SA <- 10*log10(EK60_EK80_all$NASC/4/pi/1852^2)
EK60_EK80_freq <- EK60_EK80_all[ EK60_EK80_all$frequency == 38000 &
EK60_EK80_all$survey == 'HERAS'&EK60_EK80_all$year == 2017,]
EK60 <- EK60_EK80_freq[EK60_EK80_freq$system == 'EK60',]
EK80 <- EK60_EK80_freq[EK60_EK80_freq$system == 'EK80',]
EK60_EK80_merge <- merge(EK60, EK80, by.x=c('Interval','Layer','survey','year'), by.y=c('Interval','Layer','survey','year'))
EK60_EK80_merge <- EK60_EK80_merge[!which(EK60_EK80_merge$SA.x == max(EK60_EK80_merge$SA.x)),]
lrfit <- gam(data = EK60_EK80_merge,formula= SA.y ~ s(SA.x))
#lrfit <- glm(data = EK60_EK80_merge,formula= SA.y ~ poly(SA.x,3))
#lrfit <- glm(data = EK60_EK80_merge,formula= SA.y ~ SA.x , family = gaussian)
summary(lrfit)
EK60_EK80_merge$resi <- residuals.gam(lrfit)
# remove ouliers
quantDel <- quantile(EK60_EK80_merge$resi, probs = c(0.01, 0.99))
EK60_EK80_merge <- EK60_EK80_merge[!(EK60_EK80_merge$resi < quantDel[1] | EK60_EK80_merge$resi[2] > quantDel[2])]
min(EK60_EK80_merge$resi)
mybin <- cut(EK60_EK80_merge$SA.x,5,include.lowest=TRUE,right = FALSE)
EK60_EK80_merge$Bins <- mybin
out <- EK60_EK80_merge %>% group_by(Bins) %>% summarise(mean_SA = mean(SA.x),sd_SA = sd(SA.x),mean_resi = mean(resi),sd_resi=sd(resi)) %>% as.data.frame()
N <- 500
SA.x_draw <- array(dim = c(dim(out)[1]*N,1))
resi_draw <- array(dim = c(dim(out)[1]*N,1))
for(idx in 1:dim(out)[1]){
SA.x_draw[(N*(idx-1)+1):(N*idx)] <- rnorm(N,mean=out$mean_SA[idx],sd = out$sd_SA[idx])
resi_draw[(N*(idx-1)+1):(N*idx)] <- rnorm(N,mean=out$mean_resi[idx],sd = out$sd_resi[idx])
}
SA.y_draw <- predict.gam(lrfit, list(SA.x = SA.x_draw),se.fit = TRUE)$fit+as.numeric(resi_draw)
xSeq <- seq(from=min(EK60_EK80_merge$SA.x), to=max(EK60_EK80_merge$SA.x), by=0.1)
ySeq <- predict.gam(lrfit, list(SA.x = xSeq),se.fit = TRUE)
myDraw <- as.data.frame(cbind(SA.x_draw,SA.y_draw))
colnames(myDraw) <- c('x','y')
ggplot(myDraw, aes(x=x, y=y) ) +
geom_bin2d() +
theme_bw()+
ylim(-140,-20)+
xlim(-140,-20)+
geom_abline(slope=1,intercept = 0)
ggplot(EK60_EK80_merge, aes(x=SA.x, y=SA.y) ) +
geom_bin2d() +
theme_bw()+
ylim(-140,-20)+
xlim(-140,-20)+
geom_abline(slope=1,intercept = 0)
#plot(SA.x_draw,SA.y_draw,xlim = c(-140,-20),ylim=c(-140,-20))
#points(EK60_EK80_merge$SA.x,EK60_EK80_merge$SA.y,col='red')
#lines(xSeq,ySeq$fit,col='blue')
#lines(c(-140,-20),c(-140,-20))
rm(list=ls())
library(data.table)
library(tidyr)
library(dplyr)
library(ggplot2)
library(mgcv)
library(MASS)
path <- 'J:/git/heras_index_kbwot/EK60_EK80/'
try(setwd(path),silent=TRUE)
EK60_EK80_all <- fread(file.path('.','EK60_EK80.csv'))
EK60_EK80_all$SA <- 10*log10(EK60_EK80_all$NASC/4/pi/1852^2)
EK60_EK80_freq <- EK60_EK80_all[ EK60_EK80_all$frequency == 38000 &
EK60_EK80_all$survey == 'IBWSS'&EK60_EK80_all$year == 2017,]
EK60 <- EK60_EK80_freq[EK60_EK80_freq$system == 'EK60',]
EK80 <- EK60_EK80_freq[EK60_EK80_freq$system == 'EK80',]
EK60_EK80_merge <- merge(EK60, EK80, by.x=c('Interval','Layer','survey','year'), by.y=c('Interval','Layer','survey','year'))
EK60_EK80_merge <- EK60_EK80_merge[!which(EK60_EK80_merge$SA.x == max(EK60_EK80_merge$SA.x)),]
lrfit <- gam(data = EK60_EK80_merge,formula= SA.y ~ s(SA.x))
#lrfit <- glm(data = EK60_EK80_merge,formula= SA.y ~ poly(SA.x,3))
#lrfit <- glm(data = EK60_EK80_merge,formula= SA.y ~ SA.x , family = gaussian)
summary(lrfit)
EK60_EK80_merge$resi <- residuals.gam(lrfit)
# remove ouliers
quantDel <- quantile(EK60_EK80_merge$resi, probs = c(0.01, 0.99))
EK60_EK80_merge <- EK60_EK80_merge[!(EK60_EK80_merge$resi < quantDel[1] | EK60_EK80_merge$resi[2] > quantDel[2])]
min(EK60_EK80_merge$resi)
mybin <- cut(EK60_EK80_merge$SA.x,5,include.lowest=TRUE,right = FALSE)
EK60_EK80_merge$Bins <- mybin
out <- EK60_EK80_merge %>% group_by(Bins) %>% summarise(mean_SA = mean(SA.x),sd_SA = sd(SA.x),mean_resi = mean(resi),sd_resi=sd(resi)) %>% as.data.frame()
N <- 500
SA.x_draw <- array(dim = c(dim(out)[1]*N,1))
resi_draw <- array(dim = c(dim(out)[1]*N,1))
for(idx in 1:dim(out)[1]){
SA.x_draw[(N*(idx-1)+1):(N*idx)] <- rnorm(N,mean=out$mean_SA[idx],sd = out$sd_SA[idx])
resi_draw[(N*(idx-1)+1):(N*idx)] <- rnorm(N,mean=out$mean_resi[idx],sd = out$sd_resi[idx])
}
SA.y_draw <- predict.gam(lrfit, list(SA.x = SA.x_draw),se.fit = TRUE)$fit+as.numeric(resi_draw)
xSeq <- seq(from=min(EK60_EK80_merge$SA.x), to=max(EK60_EK80_merge$SA.x), by=0.1)
ySeq <- predict.gam(lrfit, list(SA.x = xSeq),se.fit = TRUE)
myDraw <- as.data.frame(cbind(SA.x_draw,SA.y_draw))
colnames(myDraw) <- c('x','y')
ggplot(myDraw, aes(x=x, y=y) ) +
geom_bin2d() +
theme_bw()+
ylim(-140,-20)+
xlim(-140,-20)+
geom_abline(slope=1,intercept = 0)
ggplot(EK60_EK80_merge, aes(x=SA.x, y=SA.y) ) +
geom_bin2d() +
theme_bw()+
ylim(-140,-20)+
xlim(-140,-20)+
geom_abline(slope=1,intercept = 0)
#plot(SA.x_draw,SA.y_draw,xlim = c(-140,-20),ylim=c(-140,-20))
#points(EK60_EK80_merge$SA.x,EK60_EK80_merge$SA.y,col='red')
#lines(xSeq,ySeq$fit,col='blue')
#lines(c(-140,-20),c(-140,-20))
rm(list=ls())
library(data.table)
library(tidyr)
library(dplyr)
library(ggplot2)
library(mgcv)
library(MASS)
path <- 'J:/git/heras_index_kbwot/EK60_EK80/'
try(setwd(path),silent=TRUE)
EK60_EK80_all <- fread(file.path('.','EK60_EK80.csv'))
EK60_EK80_all$SA <- 10*log10(EK60_EK80_all$NASC/4/pi/1852^2)
EK60_EK80_freq <- EK60_EK80_all[ EK60_EK80_all$frequency == 38000 &
EK60_EK80_all$survey == 'IBWSS'&EK60_EK80_all$year == 2016,]
EK60 <- EK60_EK80_freq[EK60_EK80_freq$system == 'EK60',]
EK80 <- EK60_EK80_freq[EK60_EK80_freq$system == 'EK80',]
EK60_EK80_merge <- merge(EK60, EK80, by.x=c('Interval','Layer','survey','year'), by.y=c('Interval','Layer','survey','year'))
EK60_EK80_merge <- EK60_EK80_merge[!which(EK60_EK80_merge$SA.x == max(EK60_EK80_merge$SA.x)),]
lrfit <- gam(data = EK60_EK80_merge,formula= SA.y ~ s(SA.x))
#lrfit <- glm(data = EK60_EK80_merge,formula= SA.y ~ poly(SA.x,3))
#lrfit <- glm(data = EK60_EK80_merge,formula= SA.y ~ SA.x , family = gaussian)
summary(lrfit)
EK60_EK80_merge$resi <- residuals.gam(lrfit)
# remove ouliers
quantDel <- quantile(EK60_EK80_merge$resi, probs = c(0.01, 0.99))
EK60_EK80_merge <- EK60_EK80_merge[!(EK60_EK80_merge$resi < quantDel[1] | EK60_EK80_merge$resi[2] > quantDel[2])]
min(EK60_EK80_merge$resi)
mybin <- cut(EK60_EK80_merge$SA.x,5,include.lowest=TRUE,right = FALSE)
EK60_EK80_merge$Bins <- mybin
out <- EK60_EK80_merge %>% group_by(Bins) %>% summarise(mean_SA = mean(SA.x),sd_SA = sd(SA.x),mean_resi = mean(resi),sd_resi=sd(resi)) %>% as.data.frame()
N <- 500
SA.x_draw <- array(dim = c(dim(out)[1]*N,1))
resi_draw <- array(dim = c(dim(out)[1]*N,1))
for(idx in 1:dim(out)[1]){
SA.x_draw[(N*(idx-1)+1):(N*idx)] <- rnorm(N,mean=out$mean_SA[idx],sd = out$sd_SA[idx])
resi_draw[(N*(idx-1)+1):(N*idx)] <- rnorm(N,mean=out$mean_resi[idx],sd = out$sd_resi[idx])
}
SA.y_draw <- predict.gam(lrfit, list(SA.x = SA.x_draw),se.fit = TRUE)$fit+as.numeric(resi_draw)
xSeq <- seq(from=min(EK60_EK80_merge$SA.x), to=max(EK60_EK80_merge$SA.x), by=0.1)
ySeq <- predict.gam(lrfit, list(SA.x = xSeq),se.fit = TRUE)
myDraw <- as.data.frame(cbind(SA.x_draw,SA.y_draw))
colnames(myDraw) <- c('x','y')
ggplot(myDraw, aes(x=x, y=y) ) +
geom_bin2d() +
theme_bw()+
ylim(-140,-20)+
xlim(-140,-20)+
geom_abline(slope=1,intercept = 0)
ggplot(EK60_EK80_merge, aes(x=SA.x, y=SA.y) ) +
geom_bin2d() +
theme_bw()+
ylim(-140,-20)+
xlim(-140,-20)+
geom_abline(slope=1,intercept = 0)
#plot(SA.x_draw,SA.y_draw,xlim = c(-140,-20),ylim=c(-140,-20))
#points(EK60_EK80_merge$SA.x,EK60_EK80_merge$SA.y,col='red')
#lines(xSeq,ySeq$fit,col='blue')
#lines(c(-140,-20),c(-140,-20))
rm(list=ls())
library(data.table)
library(tidyr)
library(dplyr)
library(ggplot2)
library(mgcv)
library(MASS)
path <- 'J:/git/heras_index_kbwot/EK60_EK80/'
try(setwd(path),silent=TRUE)
EK60_EK80_all <- fread(file.path('.','EK60_EK80.csv'))
EK60_EK80_all$SA <- 10*log10(EK60_EK80_all$NASC/4/pi/1852^2)
EK60_EK80_freq <- EK60_EK80_all[ EK60_EK80_all$frequency == 38000 &
EK60_EK80_all$survey == 'HERAS'&EK60_EK80_all$year == 2018,]
EK60 <- EK60_EK80_freq[EK60_EK80_freq$system == 'EK60',]
EK80 <- EK60_EK80_freq[EK60_EK80_freq$system == 'EK80',]
EK60_EK80_merge <- merge(EK60, EK80, by.x=c('Interval','Layer','survey','year'), by.y=c('Interval','Layer','survey','year'))
EK60_EK80_merge <- EK60_EK80_merge[!which(EK60_EK80_merge$SA.x == max(EK60_EK80_merge$SA.x)),]
lrfit <- gam(data = EK60_EK80_merge,formula= SA.y ~ s(SA.x))
#lrfit <- glm(data = EK60_EK80_merge,formula= SA.y ~ poly(SA.x,3))
#lrfit <- glm(data = EK60_EK80_merge,formula= SA.y ~ SA.x , family = gaussian)
summary(lrfit)
EK60_EK80_merge$resi <- residuals.gam(lrfit)
# remove ouliers
quantDel <- quantile(EK60_EK80_merge$resi, probs = c(0.01, 0.99))
EK60_EK80_merge <- EK60_EK80_merge[!(EK60_EK80_merge$resi < quantDel[1] | EK60_EK80_merge$resi[2] > quantDel[2])]
min(EK60_EK80_merge$resi)
mybin <- cut(EK60_EK80_merge$SA.x,5,include.lowest=TRUE,right = FALSE)
EK60_EK80_merge$Bins <- mybin
out <- EK60_EK80_merge %>% group_by(Bins) %>% summarise(mean_SA = mean(SA.x),sd_SA = sd(SA.x),mean_resi = mean(resi),sd_resi=sd(resi)) %>% as.data.frame()
N <- 500
SA.x_draw <- array(dim = c(dim(out)[1]*N,1))
resi_draw <- array(dim = c(dim(out)[1]*N,1))
for(idx in 1:dim(out)[1]){
SA.x_draw[(N*(idx-1)+1):(N*idx)] <- rnorm(N,mean=out$mean_SA[idx],sd = out$sd_SA[idx])
resi_draw[(N*(idx-1)+1):(N*idx)] <- rnorm(N,mean=out$mean_resi[idx],sd = out$sd_resi[idx])
}
SA.y_draw <- predict.gam(lrfit, list(SA.x = SA.x_draw),se.fit = TRUE)$fit+as.numeric(resi_draw)
xSeq <- seq(from=min(EK60_EK80_merge$SA.x), to=max(EK60_EK80_merge$SA.x), by=0.1)
ySeq <- predict.gam(lrfit, list(SA.x = xSeq),se.fit = TRUE)
myDraw <- as.data.frame(cbind(SA.x_draw,SA.y_draw))
colnames(myDraw) <- c('x','y')
ggplot(myDraw, aes(x=x, y=y) ) +
geom_bin2d() +
theme_bw()+
ylim(-140,-20)+
xlim(-140,-20)+
geom_abline(slope=1,intercept = 0)
ggplot(EK60_EK80_merge, aes(x=SA.x, y=SA.y) ) +
geom_bin2d() +
theme_bw()+
ylim(-140,-20)+
xlim(-140,-20)+
geom_abline(slope=1,intercept = 0)
load("cpue.RData")
library(TMB)
compile("ar1.cpp")
path <- 'J:/git/SAM_TMB/d5_validation'
try(setwd(path),silent=TRUE)
load("cpue.RData")
path <- 'J:/git/SAM_TMB/d5_validation'
try(setwd(path),silent=TRUE)
load("cpue.RData")
library(TMB)
compile("ar1.cpp")
dyn.load(dynlib("ar1"))
path <- 'J:/git/SAM_TMB/d5_validation'
try(setwd(path),silent=TRUE)
load("cpue.RData")
library(TMB)
compile("ar1.cpp")
dyn.load(dynlib("ar1"))
path <- 'J:/git/SAM_TMB/d5_validation'
try(setwd(path),silent=TRUE)
load("cpue.RData")
library(TMB)
compile("ar1.cpp")
dyn.load(dynlib("ar1"))
data = list(y = y)
par = list(logSigma = -2, phiTrans = 1, gamma = rep(0,length(y)))
obj <- MakeADFun(data,par,random = "gamma",DLL = "ar1")
fit <- nlminb(obj$par,obj$fn,obj$gr)
sdr <- sdreport(obj)
estX <- summary(sdr,'random')
path <- 'J:/git/SAM_TMB/d5_validation'
try(setwd(path),silent=TRUE)
load("cpue.RData")
library(TMB)
compile("ar1.cpp")
dyn.load(dynlib("ar1"))
data = list(y = y)
par = list(logSigma = -2, phiTrans = 1, gamma = rep(0,length(y)))
obj <- MakeADFun(data,par,random = "gamma",DLL = "ar1")
fit <- nlminb(obj$par,obj$fn,obj$gr)
sdr <- sdreport(obj)
estX <- summary(sdr,'random')
C <- solve(obj$env$spHess(obj$env$last.par.best,random=TRUE))
gamma.star <- MASS::mvrnorm(1,estX[,1],C)
rep <- obj$report()
path <- 'J:/git/SAM_TMB/d5_validation'
try(setwd(path),silent=TRUE)
load("cpue.RData")
library(TMB)
compile("ar1.cpp")
dyn.load(dynlib("ar1"))
data = list(y = y)
par = list(logSigma = -2, phiTrans = 1, gamma = rep(0,length(y)))
obj <- MakeADFun(data,par,random = "gamma",DLL = "ar1")
fit <- nlminb(obj$par,obj$fn,obj$gr)
sdr <- sdreport(obj)
estX <- summary(sdr,'random')
C <- solve(obj$env$spHess(obj$env$last.par.best,random=TRUE))
gamma.star <- MASS::mvrnorm(1,estX[,1],C)
rep <- obj$report()
res <- (gamma.star[-1]-rep$phi*gamma.start[-length(gamma.star)])/rep$sd
path <- 'J:/git/SAM_TMB/d5_validation'
try(setwd(path),silent=TRUE)
load("cpue.RData")
library(TMB)
compile("ar1.cpp")
dyn.load(dynlib("ar1"))
data = list(y = y)
par = list(logSigma = -2, phiTrans = 1, gamma = rep(0,length(y)))
obj <- MakeADFun(data,par,random = "gamma",DLL = "ar1")
fit <- nlminb(obj$par,obj$fn,obj$gr)
sdr <- sdreport(obj)
estX <- summary(sdr,'random')
C <- solve(obj$env$spHess(obj$env$last.par.best,random=TRUE))
gamma.star <- MASS::mvrnorm(1,estX[,1],C)
rep <- obj$report()
res <- (gamma.star[-1]-rep$phi*gamma.star[-length(gamma.star)])/rep$sd
qqnorm(res)
abline(0,1)
res
library(stockassessment)
example(plotby)
example(plotby)
library(TMB)
library(stockassessment)
setwd("J:/git/SAM_TMB/d5_validation_SAM")
cn <- read.ices("testdata/cn.dat")
cw <- read.ices("testdata/cw.dat")
dw <- read.ices("testdata/dw.dat")
lf <- read.ices("testdata/lf.dat")
lw <- read.ices("testdata/lw.dat")
mo <- read.ices("testdata/mo.dat")
nm <- read.ices("testdata/nm.dat")
pf <- read.ices("testdata/pf.dat")
pm <- read.ices("testdata/pm.dat")
sw <- read.ices("testdata/sw.dat")
surveys <- read.ices("testdata/survey.dat")
dat <-setup.sam.data (  surveys = surveys,
residual.fleet =cn,
prop.mature =mo,
stock.mean.weight =sw,
catch.mean.weight =cw,
dis.mean.weight =dw,
land.mean.weight =lw,
prop.f=pf,
prop.m=pm,
natural.mortality =nm,
land.frac =lf)
conf <- defcon (dat)
par <- defpar (dat, conf)
fit <- sam.fit(dat, conf, par)
modeltable(c(fit))
residuals(fit)
res <- residuals(fit)
plot(res)
retro(fit)
retro(fit,year = c(2017,2016))
fit.jit <- jit(fit, nojit=100)
fit.jit
fit$low
fit
fit$data
fit$data$noYears
fit$data$propM
retro.fit <- retro(fit = fit,year = c(2017,2016,2015,2014))
plot(retro.fit)
cc <-TMB :: checkConsistency (fit$obj , n =200)
sim <- simstudy(fit,nsim=10) # simulation of assessment
plot(sim)
fit2 <- sam.fit(dat, conf, par,sim.condRE = FALSE)
